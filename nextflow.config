
manifest{
    name = 'Cyclomics/CyclomicsSeq'
    author = 'Cyclomics'
    homePage = 'http://cyclomics.com'
    description = 'Create high quality alignment data with variant identification for the Cyclomics CyclomicsSeq protocol.'
    mainScript      = 'main.nf'
    nextflowVersion = '>=20.10.0'
    version         = '0.9.0-rc1'
}

epi2melabs {
    outdirParam = 'output_dir'
    tags = "cyclomicsseq,variant calling,amplicon"
    icon = "faCircleNotch"
}


default_container = 'damicyclomics/cyclomicseq:0.7.2'

params.user_conda_location = "${projectDir}/environment.yml"

default_cycas_container_location = '/cycas/cycas.py'

params.economy_mode = null
params.profile_selected = 'none'


profiles{
    standard {
        docker{
            params.profile_selected = 'docker'
            process.container = default_container
            docker.enabled = true
            params.cycas_location = default_cycas_container_location
        }
    }

  singularity{
    params.profile_selected = 'singularity'
    process.container = default_container
    singularity.enabled = true
    params.cycas_location = default_cycas_container_location
  }

  conda{
    params.profile_selected = 'conda'
    process.conda = params.user_conda_location
    params.cycas_location = "${projectDir}/Cycas/cycas/cycas.py"
  }

  local{
    params.profile_selected = 'local'
    params.cycas_location = "${projectDir}/Cycas/cycas/cycas.py"
  }
}

MAX_CPUS = 16

process{
  withLabel: minimap_large {
    container = default_container
    cpus   = (params.economy_mode == true ? 2 : 2)
    memory = (params.economy_mode == true ? 2.GB : 10.GB)
  }
  withLabel: many_cpu_medium {
    container = default_container
    cpus   = 1
    memory = (params.economy_mode == true ? 2.GB :4.GB)
  }
  withLabel: many_low_cpu_low_mem {
    container = default_container
    cpus   = 1
    memory = 2.GB
  }
  withLabel: many_low_cpu_tiny_mem {
    container = default_container
    cpus   = 1
    memory = 1.GB
  }
  withLabel: many_low_cpu_high_mem {
    container = default_container
    cpus   = 1
    memory = (params.economy_mode == true ? 2.GB :8.GB )
  } 
  withLabel: many_low_cpu_huge_mem {
    container = default_container
    cpus   = 1
    memory = (params.economy_mode == true ? 2.GB :16.GB )
  } 
  withLabel: many_med_cpu_high_mem {
    container = default_container
    cpus   = 2
    memory = (params.economy_mode == true ? 2.GB :8.GB)
  }
  withLabel: many_med_cpu_huge_mem {
    container = default_container
    cpus   = 2
    memory = (params.economy_mode == true ? 2.GB :16.GB)
  }
  withLabel: max_performance {
    container = default_container
    cpus   = (params.economy_mode == true ? 2 : MAX_CPUS )
  }

  withLabel: few_memory_intensive {
    container = default_container
    cpus   = (params.economy_mode == true ? 2 : 8 )
    memory = (params.economy_mode == true ? 2.GB : 16.GB)
  }
  withLabel: few_very_memory_intensive {
    container = default_container
    cpus   = (params.economy_mode == true ? 2 : 8 )
    memory = (params.economy_mode == true ? 2.GB : 31.GB)
  }
}

params{
  out_dir = "output"
  filtering{
    minimun_raw_length  = 1000
  }
  tidehunter{
    headerlines         = "readName\trepN\tcopyNum\treadLen\tstart\tend\tconsLen\taveMatch\tfullLen\tsubPos\tconsSeq"
    headerlinesQual     = "readName\trepN\tcopyNum\treadLen\tstart\tend\tconsLen\taveMatch\tfullLen\tsubPos\tconsSeq\tquality"
    minimum_match_ratio = 0.4
    minimum_period      = 60
    minimum_copy        = 3
    kmer_length         = 16
    primer_length       = 10
  }

  snp_filters{
    min_dir_ratio       = 0.001
    min_dir_count       = 5
    min_dpq             = 5_000
    min_dpq_n           = 25
    min_dpq_ratio       = 0.3
    min_vaf             = 0.0030
    min_rel_ratio       = 0.3
    min_abq             = 70
  }

  indel_filters{
    min_dir_ratio       = 0.002
    min_dir_count       = 5
    min_dpq             = 5_000
    min_dpq_n           = 25
    min_dpq_ratio       = 0.3
    min_vaf             = 0.004
    min_rel_ratio       = 0.4
    min_abq             = 70
  }
  
  minimap2parameterized{
    min_chain_score =  1
    min_chain_count = 10
    min_peak_aln_score = 20
  }
  bwamem{
    mem_max_genome_occurance = 100
    softclip_penalty = 0.05
  }
  medaka{
    depth = 1
    model = "r104_e81_sup_g5015"
    chunk_len = 100 
    chunk_ovlp = 50
    method = "spoa"
    length = 50
    batch_size = 1000
  }
}


timeline {
  enabled = true
  file = "${params.out_dir}/execution/timeline.html"
}
report {
  enabled = true
  file = "${params.out_dir}/execution/report.html"
}
trace {
  enabled = true
  file = "${params.out_dir}/execution/trace.txt"
}
